import * as minifier from 'html-minifier';
import * as through2 from 'through2';
import * as path from 'path';

let minifierOptions = {
    caseSensitive: false,
    collapseBooleanAttributes: true,      // Not default
    collapseInlineTagWhitespace: false,
    collapseWhitespace: true,             // Not default
    conservativeCollapse: true,           // Not default
    decodeEntities: false,
    html5: true,
    includeAutoGeneratedTags: true,
    keepClosingSlash: false,
    minifyCSS: false,
    minifyJS: false,
    minifyURLs: false,
    preserveLineBreaks: false,
    preventAttributesEscaping: false,
    processConditionalComments: false,
    removeAttributeQuotes: false,
    removeComments: true,                 // Not default
    removeEmptyAttributes: false,
    removeEmptyElements: false,
    removeOptionalTags: false,
    removeRedundantAttributes: true,      // Not default
    removeScriptTypeAttributes: true,     // Not default
    removeStyleLinkTypeAttributes: true,  // Not default
    removeTagWhitespace: false,
    sortAttributes: true,                 // Not default
    sortClassName: true,                  // Not default
    trimCustomFragments: false,
    useShortDoctype: false
};

let minifyExt = new Set<string>();
minifyExt.add('.htm');
minifyExt.add('.html');

let otherExt = new Set<string>();
otherExt.add('.txt');

/**
 * A Browserify Transform for importing a non-JS file content as a string using CommonJS module.
 * @param file 
 * @param options 
 */
export default function Templatify(file: string) {
    return through2(function (buffer: Buffer, encoding, next) {
        let ext = path.extname(file).toLowerCase();

        let shouldMinify = minifyExt.has(ext);
        let isTemplate = shouldMinify || otherExt.has(ext);

        if (!isTemplate) {
            return next(null, buffer);
        }

        let template = buffer.toString('utf8');

        if (shouldMinify) {
            template = minifier.minify(template, minifierOptions).trim();
        }

        template = 'module.exports = ' + JSON.stringify(template) + ';\n';
        //console.log("Templatify > " + file + "\n" + template);
        return next(null, template);
    });
}
