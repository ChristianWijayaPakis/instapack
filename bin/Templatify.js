"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const minifier = require("html-minifier");
const through2 = require("through2");
const path = require("path");
let minifierOptions = {
    caseSensitive: false,
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: false,
    collapseWhitespace: true,
    conservativeCollapse: true,
    decodeEntities: false,
    html5: true,
    includeAutoGeneratedTags: true,
    keepClosingSlash: false,
    minifyCSS: false,
    minifyJS: false,
    minifyURLs: false,
    preserveLineBreaks: false,
    preventAttributesEscaping: false,
    processConditionalComments: false,
    removeAttributeQuotes: false,
    removeComments: true,
    removeEmptyAttributes: false,
    removeEmptyElements: false,
    removeOptionalTags: false,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    removeTagWhitespace: false,
    sortAttributes: true,
    sortClassName: true,
    trimCustomFragments: false,
    useShortDoctype: false
};
let minifyExt = new Set();
minifyExt.add('.htm');
minifyExt.add('.html');
let otherExt = new Set();
otherExt.add('.txt');
function Templatify(file) {
    return through2(function (buffer, encoding, next) {
        let ext = path.extname(file).toLowerCase();
        let shouldMinify = minifyExt.has(ext);
        let isTemplate = shouldMinify || otherExt.has(ext);
        if (!isTemplate) {
            return next(null, buffer);
        }
        let template = buffer.toString('utf8');
        if (shouldMinify) {
            template = minifier.minify(template, minifierOptions).trim();
        }
        template = 'module.exports = ' + JSON.stringify(template) + ';\n';
        return next(null, template);
    });
}
exports.default = Templatify;
